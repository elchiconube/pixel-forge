---
export interface Props {
  id: string;
  image: string;
  title?: string;
  className?: string;
  size?: 'small' | 'medium' | 'large';
}

const {
  id,
  image, 
  title = "", 
  className = "", 
  size = "medium" 
} = Astro.props;

---

<div 
  id={id}
  class={`credit-card credit-card--${size} ${className}`} 
  data-image-url={image}
  data-title={title}
>
  <div class="glare"></div>
</div>

<style>
  .credit-card {
    position: relative;
    padding: 1.5rem;
    color: ghostwhite;
    border-radius: 0.625rem;
    background-size: cover;
    background-position: center;
    overflow: hidden;
    cursor: pointer;
    aspect-ratio: 97 / 134;
  }

  .credit-card--small {
    width: 15rem;
  }
  
  .credit-card--medium {
    width: 18.75rem;
  }
  
  .credit-card--large {
    width: 22.5rem;
  }

  .glare {
    position: absolute;
    width: 100%;
    height: 100%;
    left: 0;
    top: 0;
    opacity: 0;
    border-radius: 0.625rem;
    pointer-events: none;
  }
</style>

<script>
  let gsapLoadPromise: Promise<any> | null = null;
  
  function loadGSAP(): Promise<any> {
    if (window.gsap) {
      return Promise.resolve(window.gsap);
    }
    
    if (gsapLoadPromise) {
      return gsapLoadPromise;
    }
    
    gsapLoadPromise = new Promise((resolve, reject) => {
      const script = document.createElement('script');
      script.src = 'https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js';
      script.onload = () => resolve(window.gsap);
      script.onerror = (e) => {
        gsapLoadPromise = null;
        reject(e);
      };
      document.head.appendChild(script);
    });
    
    return gsapLoadPromise;
  }

  let cardsInitialized = false;

  async function initCreditCards() {
    if (cardsInitialized) return;
    
    try {
      const gsap = await loadGSAP();
      const cards = document.querySelectorAll('.credit-card');
      
      if (cards.length === 0) return;
      
        cardsInitialized = true;
      
      cards.forEach(card => {
        const image = card.getAttribute('data-image-url');
        const title = card.getAttribute('data-title');
        if (image) {
          card.style.backgroundImage = `url(${image})`;
        }
        
        let bounds: DOMRect;
        let lastShadowOffsetX = 0;
        let lastShadowOffsetY = 0;
        let lastShadowBlur = 0;
        
        function moveToMouse(e: MouseEvent) {
          const mouseX = e.clientX;
          const mouseY = e.clientY;
          const leftX = mouseX - bounds.x;
          const topY = mouseY - bounds.y;
          const center = {
            x: leftX - bounds.width / 2,
            y: topY - bounds.height / 2
          };
          
          const distance = Math.sqrt(center.x ** 2 + center.y ** 2);
          const rotationX = center.y / 50;
          const rotationY = -center.x / 50;
          
          const shadowOffsetX = -rotationY * 5;
          const shadowOffsetY = rotationX * 5;
          const shadowBlur = 20 + distance / 120;
          
          lastShadowOffsetX = shadowOffsetX;
          lastShadowOffsetY = shadowOffsetY;
          lastShadowBlur = shadowBlur;
          
          gsap.to(card, {
            scale: 1.1,
            rotationX: rotationX,
            rotationY: rotationY,
            transformPerspective: 500,
            ease: "power2.out",
            boxShadow: `${shadowOffsetX}px ${shadowOffsetY}px ${shadowBlur}px 6px rgba(72, 65, 56, .4)`
          });
          
          const glare = card.querySelector('.glare');
          if (glare) {
            gsap.to(glare, {
              autoAlpha: 1,
              backgroundImage: `
                radial-gradient(
                  circle at
                  ${center.x * 2 + bounds.width / 2}px
                  ${center.y * 2 + bounds.height / 2}px,
                  rgba(255, 255, 255, 0.33),
                  rgba(0, 0, 0, 0.06)
                )
              `
            });
          }
        }
        
        card.addEventListener('mouseenter', () => {
          bounds = card.getBoundingClientRect();
          document.addEventListener('mousemove', moveToMouse);
          
          gsap.to(card, {
            scale: 1.1,
            rotationX: 0,
            rotationY: 0,
            duration: 0.6
          });
        });
        
        card.addEventListener('mouseleave', () => {
          document.removeEventListener('mousemove', moveToMouse);
          
          gsap.to(card, {
            scale: 1,
            rotationX: 0,
            rotationY: 0,
            duration: 0.6,
            ease: "power2.out"
          });
          
          gsap.to(card, {
            boxShadow: `${lastShadowOffsetX}px ${lastShadowOffsetY}px ${lastShadowBlur}px 0 rgba(72, 65, 56, .4)`,
            duration: 0.3,
            ease: "power3.out",
            onComplete: () => {
              gsap.to(card, {
                boxShadow: `0px 0px ${lastShadowBlur}px 0 rgba(0, 0, 0, 0)`,
                duration: 1.2
              });
            }
          });
          
          const glare = card.querySelector('.glare');
          if (glare) {
            gsap.to(glare, {
              autoAlpha: 0,
              duration: 0.6
            });
          }
        });
      });
    } catch (error) {
      console.error('Error cargando GSAP:', error);
      cardsInitialized = false; // Permitir reintentos si hay error
    }
  }

  // Inicializar cuando el DOM esté listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initCreditCards);
  } else {
    initCreditCards();
  }

  // Reinicializar en navegación SPA de Astro
  document.addEventListener('astro:page-load', () => {
    cardsInitialized = false; // Resetear el estado para permitir reinicialización
    initCreditCards();
  });
</script>

<style is:global>
  /* Estilos globales necesarios para GSAP */
  .credit-card {
    transform-style: preserve-3d;
  }
</style>